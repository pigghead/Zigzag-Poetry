{"version":3,"sources":["Components/ZigzagResult.js","Components/Input.js","App.js","reportWebVitals.js","index.js"],"names":["ItemList","props","this","item","map","text","React","Component","ZigzagResult","p_arr","poem_array","className","m","InputPrompt","state","numColumns","poemInput","poemArr","handleSubmit","bind","alterPoemInput","e","preventDefault","target","name","setState","elements","value","N","M","split","poem_array_2d","periodsNeeded","length","i","push","pLen","splice","reverse","onSubmit","rows","type","columns","App","Input","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAGMA,E,kDACF,WAAYC,GAAQ,wC,0CAIpB,WAEI,OADaC,KAAKD,MAAME,KAEfC,KAAI,SAACC,GAAD,OACL,6BAAKA,W,GATEC,IAAMC,WAoCdC,E,kDApBX,WAAYP,GAAO,OAAC,oBAAD,a,0CAKnB,WACI,IAAMQ,EAAQP,KAAKD,MAAMS,WACzB,OACI,qBAAKC,UAAU,mBAAf,SACKF,EAAML,KAAI,SAACQ,GAAD,OACP,6BACI,cAAC,EAAD,CAAUT,KAAMS,e,GAZbN,IAAMC,WC6ElBM,E,kDA1FX,WAAYZ,GAAQ,IAAD,8BACf,gBAGKa,MAAQ,CACTC,WAAY,EACZC,UAAW,GACXC,QAAS,CAAC,IAGd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBAXP,E,gDAcnB,SAAaE,GACTA,EAAEC,iBACWD,EAAEE,OAAOC,KAGtBtB,KAAKuB,SAAS,CAACV,WAAYM,EAAEE,OAAOG,SAASX,WAAWY,MACzCX,UAAWK,EAAEE,OAAOG,SAASV,UAAUW,QAEtDzB,KAAKkB,eAAelB,KAAKY,MAAME,UAAWd,KAAKY,MAAMC,c,4BAGzD,SAAea,EAAGC,GAEXA,EAAI,KAAKA,EAAI,IACbA,EAAI,IAAIA,EAAE,GAMb,IALA,IAAInB,EAAakB,EAAEE,MAAM,OACrBC,EAAgB,GAGhBC,EAAgB,GACbtB,EAAWuB,OAASD,GAAiBH,GAAK,GAC7CG,GAAiB,EAGrB,IAAI,IAAIE,EAAI,EAAGA,EAAIF,EAAeE,IAC9BxB,EAAWyB,KAAK,KAIhB,IADJ,IAAIC,EAAO1B,EAAWuB,OAASJ,EACrBnB,EAAWuB,QACbF,EAAcI,KAAKzB,EAAW2B,OAAO,EAAED,IAI/C,IAAI,IAAIF,EAAI,EAAGA,GAAKH,EAAcE,OAAQC,GAAG,EAClB,MAApBH,EAAcG,IAEjBH,EAAcG,GAAGI,UAIrBpC,KAAKuB,SAAS,CAACR,QAASc,M,oBAgB5B,WACI,OACI,gCACI,uBAAMpB,UAAU,kBAAkB4B,SAAUrC,KAAKgB,aAAjD,UACI,0BACIsB,KAAK,IACLhB,KAAK,cACT,uBAAOA,KAAK,eACZ,uBAAOiB,KAAK,SAASd,MAAM,gBAE/B,cAAC,EAAD,CACIe,QAASxC,KAAKY,MAAMC,WACpBL,WAAYR,KAAKY,MAAMG,iB,GApFjBX,IAAMC,W,OCuBjBoC,MAxBf,WACE,OAiBE,aAhBA,CAgBA,gBACE,cAACC,EAAD,OCVSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aa7e9852.chunk.js","sourcesContent":["import React from 'react';\r\nimport InputPrompt from './Input.js';\r\n\r\nclass ItemList extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        const name = this.props.item;\r\n        return (\r\n            name.map((text) =>\r\n                <li>{text}</li>\r\n            )\r\n        );\r\n    }\r\n}\r\n\r\nclass ZigzagResult extends React.Component {\r\n    constructor(props) {\r\n        // props -> poem_array, columns\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        const p_arr = this.props.poem_array;\r\n        return (\r\n            <div className=\"result-container\">\r\n                {p_arr.map((m) =>\r\n                    <ul>\r\n                        <ItemList item={m} />\r\n                    </ul>\r\n                )}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ZigzagResult;","import { render } from '@testing-library/react';\r\nimport React from 'react';\r\nimport ZigzagResult from './ZigzagResult.js';\r\n\r\nclass InputPrompt extends React.Component {\r\n    constructor(props) {\r\n        super();\r\n        // must track the number of columns\r\n        // and the poem itself\r\n        this.state = {\r\n            numColumns: 1,\r\n            poemInput: '',\r\n            poemArr: [,],\r\n        }\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.alterPoemInput = this.alterPoemInput.bind(this);\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault(); // prevent refresh\r\n        const name = e.target.name;\r\n        //this.alterPoemInput(this.state.poemInput, this.state.numColumns);\r\n\r\n        this.setState({numColumns: e.target.elements.numColumns.value,\r\n                       poemInput: e.target.elements.poemInput.value});\r\n\r\n        this.alterPoemInput(this.state.poemInput, this.state.numColumns);\r\n    }\r\n\r\n    alterPoemInput(N, M) {\r\n        // N words % M columns = r remainder, M - r = p num periods needed\r\n        if(M > 10) {M = 10;}\r\n        if(M < 1) {M=1;}\r\n        var poem_array = N.split(/\\s/g); // split by any and all white space characters (space + newline)\r\n        var poem_array_2d = [];\r\n\r\n        // pad with periods wbefore converting to 2d array\r\n        var periodsNeeded = 0;\r\n        while((poem_array.length + periodsNeeded) % M != 0) {\r\n            periodsNeeded += 1;\r\n        }\r\n\r\n        for(let i = 0; i < periodsNeeded; i++) {\r\n            poem_array.push('.');\r\n        }\r\n\r\n        var pLen = poem_array.length / M;\r\n            while(poem_array.length) {\r\n                poem_array_2d.push(poem_array.splice(0,pLen));\r\n            }\r\n\r\n\r\n        for(let i = 1; i <= poem_array_2d.length; i+=2) {\r\n            if(poem_array_2d[i] == null) {continue;}\r\n            //this.reverseList(poem_array_2d[i]);\r\n            poem_array_2d[i].reverse();\r\n        }\r\n\r\n        //return poem_array_2d;\r\n        this.setState({poemArr: poem_array_2d});\r\n    }\r\n\r\n    // Reverse every other list in a 2d array\r\n    /*reverseList(arr) {\r\n        var l = 0;\r\n        var r = arr.length-1;\r\n        while(l < r) {\r\n            let t = arr[r];\r\n            arr[r] = arr[l];\r\n            arr[l] = t;\r\n            l++;\r\n            r--;\r\n        }\r\n    }*/\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"input-container\" onSubmit={this.handleSubmit}>\r\n                    <textarea\r\n                        rows='1'\r\n                        name=\"poemInput\" />\r\n                    <input name=\"numColumns\" />\r\n                    <input type='submit' value='Beautify'/>\r\n                </form>\r\n                <ZigzagResult \r\n                    columns={this.state.numColumns}\r\n                    poem_array={this.state.poemArr}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputPrompt;","import InputPrompt from './Components/Input.js';\nimport './css/style.css';\n\nfunction App() {\n  return (\n    /*<div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>*/\n    <div>\n      <InputPrompt />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}